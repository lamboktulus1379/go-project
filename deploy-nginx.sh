#!/bin/bash

# Go Project Nginx Deployment Script
# This script automates the deployment of the Go project with nginx proxy setup

set -e  # Exit on any error

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Configuration
PROJECT_DIR="/Users/lamboktulussimamora/Projects/go-project"
NGINX_CONFIG_DIR="/opt/homebrew/etc/nginx"
NGINX_SERVERS_DIR="$NGINX_CONFIG_DIR/servers"
NGINX_CERTS_DIR="$NGINX_CONFIG_DIR/certs"
DOMAIN="gra.tulus.tech"
GO_PORT=10001
REDIRECT_PORT=10020
LOG_FILE="/tmp/go-app-deployment.log"

# Function to print colored output
print_status() {
    echo -e "${BLUE}[INFO]${NC} $1"
}

print_success() {
    echo -e "${GREEN}[SUCCESS]${NC} $1"
}

print_warning() {
    echo -e "${YELLOW}[WARNING]${NC} $1"
}

print_error() {
    echo -e "${RED}[ERROR]${NC} $1"
}

# Function to check if command exists
command_exists() {
    command -v "$1" >/dev/null 2>&1
}

# Function to check if port is in use
port_in_use() {
    lsof -i :$1 >/dev/null 2>&1
}

# Function to kill processes on specific port
kill_port_processes() {
    local port=$1
    local pids=$(lsof -ti :$port 2>/dev/null || true)
    if [ ! -z "$pids" ]; then
        print_warning "Killing processes on port $port: $pids"
        echo $pids | xargs kill -9 2>/dev/null || true
        sleep 2
    fi
}

# Function to setup certificates
setup_certificates() {
    print_status "Setting up SSL certificates..."

    # Create nginx certs directory if it doesn't exist
    sudo mkdir -p "$NGINX_CERTS_DIR"

    # Check if project certificates exist
    if [ -f "$PROJECT_DIR/certs/gra.tulus.tech-cert.pem" ] && [ -f "$PROJECT_DIR/certs/gra.tulus.tech-key.pem" ]; then
        print_status "Copying existing certificates to nginx directory..."
        sudo cp "$PROJECT_DIR/certs/gra.tulus.tech-cert.pem" "$NGINX_CERTS_DIR/gra.tulus.tech.pem"
        sudo cp "$PROJECT_DIR/certs/gra.tulus.tech-key.pem" "$NGINX_CERTS_DIR/gra.tulus.tech-key.pem"
        print_success "Certificates copied successfully"
    elif command_exists mkcert; then
        print_status "Generating new certificates with mkcert..."
        cd "$PROJECT_DIR/certs"
        mkcert -install
        mkcert $DOMAIN localhost 127.0.0.1 ::1

        # Copy to nginx directory
        sudo cp "${DOMAIN}+3.pem" "$NGINX_CERTS_DIR/gra.tulus.tech.pem" 2>/dev/null || \
        sudo cp "$DOMAIN-cert.pem" "$NGINX_CERTS_DIR/gra.tulus.tech.pem" 2>/dev/null || \
        sudo cp "gra.tulus.tech-cert.pem" "$NGINX_CERTS_DIR/gra.tulus.tech.pem"

        sudo cp "${DOMAIN}+3-key.pem" "$NGINX_CERTS_DIR/gra.tulus.tech-key.pem" 2>/dev/null || \
        sudo cp "$DOMAIN-key.pem" "$NGINX_CERTS_DIR/gra.tulus.tech-key.pem" 2>/dev/null || \
        sudo cp "gra.tulus.tech-key.pem" "$NGINX_CERTS_DIR/gra.tulus.tech-key.pem"

        print_success "Certificates generated and copied"
    else
        print_error "mkcert not found and no existing certificates. Please install mkcert or provide certificates manually."
        exit 1
    fi
}

# Function to setup nginx configuration
setup_nginx_config() {
    print_status "Setting up nginx configuration..."

    # Create servers directory if it doesn't exist
    sudo mkdir -p "$NGINX_SERVERS_DIR"

    # Create nginx server configuration
    local config_file="$NGINX_SERVERS_DIR/gra.tulus.tech.conf"

    sudo tee "$config_file" > /dev/null << EOF
# Go Project Nginx Configuration
# Auto-generated by deploy-nginx.sh on $(date)

# Redirect traffic from port $REDIRECT_PORT to HTTPS $DOMAIN
server {
    listen $REDIRECT_PORT;
    server_name localhost;
    return 301 https://\$host\$request_uri;
}

# Redirect HTTP to HTTPS
server {
    listen 80;
    server_name $DOMAIN;
    return 301 https://\$host\$request_uri;
}

# Main HTTPS server proxying to Go app on port $GO_PORT
server {
    listen 443 ssl;
    http2 on;
    server_name $DOMAIN;

    ssl_certificate     $NGINX_CERTS_DIR/gra.tulus.tech.pem;
    ssl_certificate_key $NGINX_CERTS_DIR/gra.tulus.tech-key.pem;

    ssl_protocols TLSv1.2 TLSv1.3;
    ssl_ciphers HIGH:!aNULL:!MD5;
    ssl_prefer_server_ciphers on;

    # Security headers
    add_header X-Frame-Options "SAMEORIGIN" always;
    add_header X-XSS-Protection "1; mode=block" always;
    add_header X-Content-Type-Options "nosniff" always;
    add_header Referrer-Policy "no-referrer-when-downgrade" always;
    add_header Content-Security-Policy "default-src 'self' http: https: data: blob: 'unsafe-inline'" always;

    location / {
        proxy_pass https://127.0.0.1:$GO_PORT;
        proxy_set_header Host \$host;
        proxy_set_header X-Real-IP \$remote_addr;
        proxy_set_header X-Forwarded-For \$proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto https;
        proxy_ssl_verify off;  # Since we're using self-signed certs for local dev

        # Timeout settings
        proxy_connect_timeout 60s;
        proxy_send_timeout 60s;
        proxy_read_timeout 60s;

        # Buffer settings
        proxy_buffering on;
        proxy_buffer_size 4k;
        proxy_buffers 8 4k;
    }

    # Health check endpoint
    location /health {
        access_log off;
        proxy_pass https://127.0.0.1:$GO_PORT/healthz;
        proxy_set_header Host \$host;
        proxy_ssl_verify off;
    }
}
EOF

    print_success "Nginx configuration created at $config_file"
}

# Function to update main nginx config
update_main_nginx_config() {
    print_status "Checking main nginx configuration..."

    local main_config="$NGINX_CONFIG_DIR/nginx.conf"

    # Check if events section exists
    if ! grep -q "events" "$main_config" 2>/dev/null; then
        print_status "Updating main nginx configuration..."
        sudo tee "$main_config" > /dev/null << 'EOF'
events {
    worker_connections 1024;
}

http {
    include       mime.types;
    default_type  application/octet-stream;
    sendfile        on;
    keepalive_timeout  65;

    # Logging
    access_log /opt/homebrew/var/log/nginx/access.log;
    error_log /opt/homebrew/var/log/nginx/error.log;

    # Gzip compression
    gzip on;
    gzip_vary on;
    gzip_min_length 1024;
    gzip_types
        text/plain
        text/css
        text/xml
        text/javascript
        application/javascript
        application/xml+rss
        application/json;

    # Include server configurations
    include servers/*;
}
EOF
        print_success "Main nginx configuration updated"
    else
        print_success "Main nginx configuration is already properly configured"
    fi
}

# Function to start Go application
start_go_app() {
    print_status "Starting Go application..."

    cd "$PROJECT_DIR"

    # Kill any existing processes on the port
    kill_port_processes $GO_PORT

    # Start the application in the background
    nohup make run-https > "$LOG_FILE" 2>&1 &
    local go_pid=$!

    # Wait a moment for the app to start
    sleep 3

    # Check if the application is running
    if port_in_use $GO_PORT; then
        print_success "Go application started successfully on port $GO_PORT (PID: $go_pid)"
        echo $go_pid > /tmp/go-app.pid
    else
        print_error "Failed to start Go application. Check logs: $LOG_FILE"
        tail -20 "$LOG_FILE"
        exit 1
    fi
}

# Function to manage nginx
manage_nginx() {
    print_status "Managing nginx service..."

    # Test nginx configuration
    if sudo nginx -t 2>/dev/null; then
        print_success "Nginx configuration is valid"
    else
        print_error "Nginx configuration is invalid"
        sudo nginx -t
        exit 1
    fi

    # Start or reload nginx
    if pgrep nginx > /dev/null; then
        print_status "Reloading nginx..."
        sudo nginx -s reload
        print_success "Nginx reloaded successfully"
    else
        print_status "Starting nginx..."
        sudo nginx
        print_success "Nginx started successfully"
    fi
}

# Function to run tests
run_tests() {
    print_status "Running deployment tests..."

    local tests_passed=0
    local total_tests=4

    # Test 1: Go app direct access
    print_status "Test 1: Testing Go application direct access..."
    if curl -k -s https://localhost:$GO_PORT/ | grep -q "Not Found"; then
        print_success "✓ Go application is responding correctly"
        ((tests_passed++))
    else
        print_error "✗ Go application test failed"
    fi

    # Test 2: Redirect test
    print_status "Test 2: Testing HTTP redirect..."
    if curl -s -I http://localhost:$REDIRECT_PORT/ | grep -q "301"; then
        print_success "✓ HTTP redirect is working"
        ((tests_passed++))
    else
        print_error "✗ HTTP redirect test failed"
    fi

    # Test 3: HTTPS proxy test
    print_status "Test 3: Testing HTTPS proxy..."
    if curl -k -s https://$DOMAIN/ | grep -q "Not Found"; then
        print_success "✓ HTTPS proxy is working"
        ((tests_passed++))
    else
        print_error "✗ HTTPS proxy test failed"
    fi

    # Test 4: API endpoint test
    print_status "Test 4: Testing API endpoint..."
    if curl -k -s https://localhost:$GO_PORT/test/youtube/videos | grep -q "success"; then
        print_success "✓ API endpoints are working"
        ((tests_passed++))
    else
        print_error "✗ API endpoint test failed"
    fi

    # Summary
    echo
    print_status "Test Results: $tests_passed/$total_tests tests passed"

    if [ $tests_passed -eq $total_tests ]; then
        print_success "All tests passed! Deployment successful!"
    else
        print_warning "Some tests failed. Please check the configuration."
    fi
}

# Function to display deployment info
show_deployment_info() {
    echo
    echo "=========================================="
    echo "         DEPLOYMENT SUMMARY"
    echo "=========================================="
    echo
    print_success "Go Application:"
    echo "  - Direct HTTPS access: https://localhost:$GO_PORT"
    echo "  - Log file: $LOG_FILE"
    echo "  - PID file: /tmp/go-app.pid"
    echo
    print_success "Nginx Configuration:"
    echo "  - HTTP redirect: http://localhost:$REDIRECT_PORT → https://$DOMAIN"
    echo "  - HTTPS proxy: https://$DOMAIN → https://localhost:$GO_PORT"
    echo "  - Config file: $NGINX_SERVERS_DIR/gra.tulus.tech.conf"
    echo
    print_success "SSL Certificates:"
    echo "  - Certificate: $NGINX_CERTS_DIR/gra.tulus.tech.pem"
    echo "  - Private key: $NGINX_CERTS_DIR/gra.tulus.tech-key.pem"
    echo
    print_success "Useful Commands:"
    echo "  - View Go app logs: tail -f $LOG_FILE"
    echo "  - Stop Go app: kill \$(cat /tmp/go-app.pid)"
    echo "  - Reload nginx: sudo nginx -s reload"
    echo "  - Test nginx config: sudo nginx -t"
    echo
    echo "=========================================="
}

# Function to cleanup on exit
cleanup() {
    if [ $? -ne 0 ]; then
        print_error "Deployment failed. Check the logs and try again."
    fi
}

# Main deployment function
main() {
    trap cleanup EXIT

    echo "=========================================="
    echo "    Go Project Nginx Deployment Script"
    echo "=========================================="
    echo

    # Check prerequisites
    print_status "Checking prerequisites..."

    if [ ! -d "$PROJECT_DIR" ]; then
        print_error "Project directory not found: $PROJECT_DIR"
        exit 1
    fi

    if ! command_exists nginx; then
        print_error "Nginx is not installed. Please install nginx first."
        exit 1
    fi

    if ! command_exists go; then
        print_error "Go is not installed. Please install Go first."
        exit 1
    fi

    print_success "Prerequisites check passed"

    # Run deployment steps
    setup_certificates
    setup_nginx_config
    update_main_nginx_config
    start_go_app
    manage_nginx
    run_tests
    show_deployment_info

    print_success "Deployment completed successfully!"
}

# Handle command line arguments
case "${1:-}" in
    "stop")
        print_status "Stopping services..."
        if [ -f /tmp/go-app.pid ]; then
            kill $(cat /tmp/go-app.pid) 2>/dev/null || true
            rm -f /tmp/go-app.pid
            print_success "Go application stopped"
        fi
        sudo nginx -s stop 2>/dev/null || true
        print_success "Nginx stopped"
        ;;
    "restart")
        $0 stop
        sleep 2
        $0
        ;;
    "test")
        run_tests
        ;;
    "status")
        print_status "Service Status:"
        if port_in_use $GO_PORT; then
            print_success "Go application is running on port $GO_PORT"
        else
            print_error "Go application is not running"
        fi

        if pgrep nginx > /dev/null; then
            print_success "Nginx is running"
        else
            print_error "Nginx is not running"
        fi
        ;;
    "logs")
        if [ -f "$LOG_FILE" ]; then
            tail -f "$LOG_FILE"
        else
            print_error "Log file not found: $LOG_FILE"
        fi
        ;;
    *)
        main
        ;;
esac
